generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model articulo {
  id                  Int                   @id @default(autoincrement())
  descripcion         String                @db.VarChar(50)
  referencia          String?               @unique(map: "referencia") @db.VarChar(50)
  precio_coste        Int
  precio_venta        Int
  id_categoria        Int
  categoria           categoria             @relation(fields: [id_categoria], references: [id], onDelete: Cascade, map: "fk_categoria")
  articulo_factura    articulo_factura[]    @ignore
  articulo_reparacion articulo_reparacion[]
  proveedor_articulo  proveedor_articulo[]  @ignore

  @@index([id_categoria], map: "fk_categoria")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model articulo_factura {
  serial      String   @db.VarChar(50)
  precio      Int
  id_articulo Int
  descripcion String   @db.VarChar(255)
  cantidad    Int
  dto         Int
  articulo    articulo @relation(fields: [id_articulo], references: [id], onDelete: Cascade, map: "fk_articulo_factura")
  factura     factura  @relation(fields: [serial], references: [serial], onDelete: Cascade, map: "fk_factura")

  @@index([id_articulo], map: "fk_articulo_factura")
  @@index([serial], map: "fk_factura")
  @@ignore
}

model categoria {
  id       Int        @id @default(autoincrement())
  nombre   String     @unique(map: "nombre") @db.VarChar(50)
  articulo articulo[]
}

model cliente {
  id               Int           @id @default(autoincrement())
  nif              String        @unique(map: "nif") @db.VarChar(50)
  nombre_fiscal    String        @db.VarChar(50)
  telefono         String        @db.VarChar(50)
  domicilio        String        @db.VarChar(255)
  CP               String        @db.VarChar(10)
  poblacion        String        @db.VarChar(50)
  provincia        String        @db.VarChar(50)
  persona_contacto String        @db.VarChar(50)
  id_usuario       String        @unique(map: "id_usuario") @db.VarChar(100)
  usuarios         usuarios      @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "fk_id_user2")
  dispositivo      dispositivo[]
  factura          factura[]

  @@index([id_usuario], map: "fk_id_user2")
}

model dispositivo {
  id                Int          @id @default(autoincrement())
  tipo              String       @db.VarChar(50)
  marca             String       @db.VarChar(50)
  modelo            String       @db.VarChar(50)
  id_cliente        Int
  codigo_desbloqueo String?      @db.VarChar(255)
  pin_sim           String?      @db.VarChar(20)
  numero_serie      String       @db.VarChar(255)
  cliente           cliente      @relation(fields: [id_cliente], references: [id], onDelete: Cascade, map: "fk_cliente")
  reparacion        reparacion[]

  @@index([id_cliente], map: "fk_cliente")
}

model factura {
  serial           String             @id @db.VarChar(50)
  id_cliente       Int
  fecha_hora       DateTime           @default(now()) @db.DateTime(0)
  cliente          cliente            @relation(fields: [id_cliente], references: [id], onDelete: Cascade, map: "fk_cliente_factura")
  articulo_factura articulo_factura[] @ignore

  @@index([id_cliente], map: "fk_cliente_factura")
}

model proveedor {
  id                 Int                  @id @default(autoincrement())
  nombre_fiscal      String               @unique(map: "nombre_fiscal") @db.VarChar(50)
  nombre_comercial   String               @db.VarChar(50)
  cif                String               @unique(map: "cif") @db.VarChar(20)
  cp                 String               @db.VarChar(10)
  direccion          String               @db.VarChar(255)
  telefono           String               @db.VarChar(20)
  email              String               @db.VarChar(255)
  proveedor_articulo proveedor_articulo[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model proveedor_articulo {
  id_proveedor Int
  id_articulo  Int
  stock        Int
  articulo     articulo  @relation(fields: [id_articulo], references: [id], onDelete: Cascade, map: "fk_id_articulo")
  proveedor    proveedor @relation(fields: [id_proveedor], references: [id], onDelete: Cascade, map: "fk_id_proveedor")

  @@index([id_articulo], map: "fk_id_articulo")
  @@index([id_proveedor], map: "fk_id_proveedor")
  @@ignore
}

model reparacion {
  id                  Int                   @id @default(autoincrement())
  id_dispositivo      Int
  id_tecnico          Int
  estado              String                @db.VarChar(50)
  accesorios          String                @db.VarChar(500)
  fecha_compromiso    DateTime              @db.DateTime(0)
  averia              String                @db.VarChar(50)
  observaciones       String                @db.VarChar(255)
  fecha_creacion      DateTime              @default(now()) @db.Timestamp(0)
  dispositivo         dispositivo           @relation(fields: [id_dispositivo], references: [id], onDelete: Cascade, map: "fk_id_dispositivo")
  tecnico             tecnico               @relation(fields: [id_tecnico], references: [id], onDelete: Cascade, map: "fk_id_tecnico")
  articulo_reparacion articulo_reparacion[]

  @@index([id_dispositivo], map: "fk_id_dispositivo")
  @@index([id_tecnico], map: "fk_id_tecnico")
}

model roles {
  rol String @id @db.VarChar(50)
}

model tecnico {
  id         Int          @id @default(autoincrement())
  nombre     String       @db.VarChar(50)
  id_usuario String       @db.VarChar(100)
  usuarios   usuarios     @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "fk_id_rol1")
  reparacion reparacion[]

  @@index([id_usuario], map: "fk_id_rol1")
}

model usuarios {
  id         String    @id @db.VarChar(100)
  username   String    @db.VarChar(100)
  password   String    @db.VarChar(100)
  registered DateTime  @default(now()) @db.DateTime(0)
  last_login DateTime? @db.DateTime(0)
  rol        String    @db.VarChar(50)
  email      String    @unique(map: "email") @db.VarChar(100)
  cliente    cliente?
  tecnico    tecnico[]
}

model articulo_reparacion {
  id_reparacion Int
  id_articulo   Int
  cantidad      Int
  articulo      articulo   @relation(fields: [id_articulo], references: [id], onDelete: Cascade, map: "fk_id_articulo1")
  reparacion    reparacion @relation(fields: [id_reparacion], references: [id], onDelete: Cascade, map: "fk_idreparacion")

  @@unique([id_reparacion, id_articulo], map: "id_reparacion")
  @@index([id_articulo], map: "fk_id_articulo1")
}
